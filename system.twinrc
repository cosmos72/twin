#________________________________________________________________________________
#                                                                                |
# Copyright (C) 2000 by Massimiliano Ghilardi                                    |
#                                                                                |
# This program is free software; you can redistribute it and/or modify           |
# it under the terms of the GNU General Public License as published by           |
# the Free Software Foundation; either version 2 of the License, or              |
# (at your option) any later version.                                            |
#________________________________________________________________________________|
#

# This file contains the configuration for TWin look-n-feel.
# By default, it is installed as ${libdir}/twin/system.twinrc
# and, provided TWin is compiled with RC parser support,
# it is used as fallback configuration in case the user does not
# have their own ${HOME}/.twinrc
#
# To customize TWin user interface, copy this file in your
# home directory as `.twinrc' and edit it as desired.
# 
# A hash sign (#) at the beginning of a line means the line is a comment (you
# are reading such a comment). Comments do not affect the function of TWin,
# they exist solely to provide instruction and description for the user.
#
# Many different commands and keywords are recognized. The glossary at the
# end of this file contains the complete list.

#________________________________________________________________________________
#__                       _______________________________________________________|
#__ Basic startup options _______________________________________________________|
#________________________________________________________________________________|
#

# Override the defaults specified at compile time:
#
# set shadows to 3x2 and enable them
GlobalFlags Shadows 2 1 +Shadows
#
# disable blink/high background
GlobalFlags -Blink
#
# do not force cursor always visible
GlobalFlags -CursorAlways
#
# disable edge screen scrolling
GlobalFlags -ScreenScroll
#
# do not hide the menu
GlobalFlags -MenuHide
#
# disable menu information row
GlobalFlags -MenuInfo
#
# don't relax menu navigation
GlobalFlags -MenuRelax


# To automatically open a terminal on startup:
#
ExecTty "" ; Wait "Twin Term"


# To automatically open a maximized terminal on startup, add
# the value "Maximize":
#
# ExecTty "" ; Wait "Twin Term" ; Maximize


# To automatically load the socket server on startup:
#
# Module "socket" On
#


# To automatically load term on startup:
#
# Module "term" On

#________________________________________________________________________________
#__         _____________________________________________________________________|
#__ Screens _____________________________________________________________________|
#________________________________________________________________________________|
#

# the screen `1' is created by twin at startup,
# so we do not need to `AddScreen 1',


# Set screen background color:
#
# The complete list of colors is:
#
# Black Blue Green Cyan Red Magenta Yellow White
#
# The prefix value "High" can be applied to any of the above colors to
# change it, and can be applied both to foreground and background.
# Depending on the display you use, `High' background may actually blink.
#
# As an example, `High Black On Blue' would mean `high intensity black' (i.e.
# gray) foreground on `blue' background.
#
# The mixture of the two values creates the screen color.
#
#The strings inside ( ) are the screen background, each string representing
# a line.
#
Background 1 Red On Blue (
   "\xb1"
)

#________________________________________________________________________________
#__                   ___________________________________________________________|
#__ Menus and Windows ___________________________________________________________|
#________________________________________________________________________________|
#

# Create the common part of all menus:
#
# Quotes are needed to protect reserved names or strings containing
# non-alphanumerical characters. Parenthesis '(' and ')' are used to group
# together a list.
#
# This creates the menuitem " Window ", shared by all applications,
# with the contents you see below.
#
# The command `Nop' is a do-nothing command used to insert a linebreak.
# `_Next' is a user function (all other ones are predefined by twin) and
# is defined below.
#
AddToMenu " Window " (
   " Move "        Interactive Move
   " Resize "      Interactive Resize
   " Scroll "      Interactive Scroll
   " Center "      Center
   " Maximize "    Maximize
   " Full Screen " FullScreen
   " Roll Up "     Roll Toggle
   ""              Nop
   " Raise/Lower " RaiseLower
   " UnFocus "     Focus Off
   " Next "        _Next
   " List... "     WindowList
   ""              Nop
   " Refresh "     Refresh
   " Send Pause "  SyntheticKey Pause
   ""              Nop
   " Close "       Close
   ""              Nop
   " Kill Client " Kill
)


# Define the user function `_Next':
#
# Group commands in '(' ')' and put either a newline or a ';'
# after each command. `Window 1' means first window, while
# `Window 0' is the currently focused window.
#
AddToFunc _Next ( Lower; Window 1; Focus; )


# Or this would do exactly the same thing:
#
# AddToFunc _Next (
#   Lower
#   Window 1
#   Focus
# )


# Or you can even split the function definition:
#
# AddToFunc _Next ( Lower; Window 1; )
# AddToFunc _Next (
#   Focus
# )


# The following are not needed. If used, they can override
# the borders defined by Alternate Font:
#
# Border "*" Inactive (
#   "ÚÄ¿"
#   "³ ³"
#   "ÀÄÙ"
# )
#
# Border "*" Active (
#    "ÉÍ»"
#    "º º"
#    "ÈÍŒ"
# )


# If you want different borders for different windows:
#
# Border "*Term*" Inactive (
#    " ß "
#    "Ý Þ"
#    " Ü "
# )
#
# Border "Clock" Active (
#    "   "
#    "   "
#    "   "
# )
#
# Border "Tw*" Active (
#    "ÖÍ·"
#    "³ ³"
#    "ÓÍœ"
# )


# Menu windows can be used. They have no name and are always
# considered Inactive:
#
# Border "" Inactive (
#   "ÛßÛ"
#   "Û Û"
#   "ÛÜÛ"
# )

#________________________________________________________________________________
#__                   ___________________________________________________________|
#__ Keyboard controls ___________________________________________________________|
#________________________________________________________________________________|
#

# Keyboard bindings syntax:
#
# Key <flags> <name> <command>
#
# Where:
#
# Key = The command to create a keybinding.
#
# <flags> = An optional value. Except on X11 display, TWin can detect flags only
# by deducing them from the ASCII sequences it receives from the keyboard, so
# Shift is almost useless and not all keys combined with Ctrl and Alt make
# sense (i.e. they must produce a unique, identificable ASCII sequence).
#
#   Shift
#   Ctrl
#   Alt
#
# <name> = The name of the key as in libTwkeys.h, without the TW_ prefix.
# To be safe, <name> should be quoted. some examples:
#
#   "Tab"   "Return"  "Escape"  "BackSpace"
#   "Left"  "Up"      "Right"   "Down"
#   "Prior" ("Page_Up")         "Next"  ("Page_Down")
#   "Home"  "End"     "Insert"  "Delete"
#   "Pause" "Num_Lock"
#   "F1" "F2" "F3" "F4" "F5" "F6" "F7" "F8" "F9" "F10" "F11" "F12"
#
# Or any ASCII character, also in double quotes, for example:
#
#   "A"  "[" "\xFF"
#
# <command> = What the binding does. See the commands glossary below.


# Both PAUSE and F12 pop up the menu. Feel free to use any other key.
#
Key  "Pause"   Interactive Menu
Key  "F12"     Interactive Menu


# A user contributed idea: ALT-TAB to cycle through windows:
#
Key Alt "Tab" _Next


# Other nifty ideas.
# These will work only on display drivers that support abstract keys.
# Currently requires one of: `tty' with Linux raw keyboard, `gfx' or `X11'.
#
#
# ALT-UP spawns a new terminal.
#
Key Alt   "Up"    ExecTty ""
#
# SHIFT-PAGEUP scrolls up focused window
#
Key Shift "Prior" Scroll +0 -10
#
# SHIFT-PAGEDOWN scrolls down focused window
#
Key Shift "Next"  Scroll +0 +10

#________________________________________________________________________________
#__               _______________________________________________________________|
#__ Mouse buttons _______________________________________________________________|
#________________________________________________________________________________|
#                                                                                |
#  ############################################################################  |
# | Note: both window controls and mouse buttons are called buttons, so it may | |
# | be a bit confusing. Look closely at the descriptions to understand whether | |
# | the word "Button" refers to a physical mouse button or a window control.   | |
#  ############################################################################  |
#________________________________________________________________________________|
#

# Mouse bindings syntax:
#
# Mouse <buttons-list> <context> <command>
#
# Where:
#
# Mouse = The command to address mouse buttons.
# 
# <buttons-list> = Mouse button values. 1 means Left, 2 means Middle,
# 3 means Right. Can be used in combination to bind more than one button to a
# command, i.e. "12" "13" "23" "123".
#
# <context> = a string consisting of one or more of the following:
#
# 0-9   button number 0-9 in window title bar (see: Window buttons)
#  C    window resize corner
#  T    window title bar
#  S    window sides
#  B    window scroll bars
#  W    one of T,S,B (i.e. window border except buttons and corner)
#  I    window inside
#  M    menu
#  R    root (screen background)
#  A    any of the above
#
# <command> = What the binding does. See the commands glossary below.
#
# There are also some more subtle ways to use the mouse buttons. CLICK
# and RELEASE can be a different control than simply CLICK.
#
# `H' means `hold'.
#
# `C' means `click', but it's the default and can be omitted. However, used in
# combination with 'H' it can be used to execute on PRESS and the again on
# CLICK by specifying `HC', for example:
#
#   Mouse  H1   0  Close
#
# instead of
#
#   Mouse   1   0  Close
#
# ...would close the window when you PRESS mouse left button on window close
# button, NOT when you CLICK (i.e. PRESS, then RELEASE) on it!


# Raise a backgrounded window by right clicking on the window inside:
#
Mouse H3 I Raise


# Choose the mouse button used for click-to-focus, for text selection, and
# to activate window gadgets.
#
GlobalFlags ButtonSelection 3


# Choose the mouse button used to paste text selection:
#
GlobalFlags ButtonPaste 2


# holding mouse right button on window title or sides does interactive move
Mouse H123  TS  Interactive Move


# mouse right on window resize corner does interactive resize
# mouse-based window resize works "as expected" only on window resize corner
# (try yourself to bind some window button to Interactive Resize and see...)
#
Mouse H3   C  Interactive Resize
Mouse H1   I  Interactive Resize


# mouse right on window bars does interactive scroll
# unluckily, mouse-based window scrolling works properly ONLY
# on window bars...
#
Mouse H3  B  Interactive Scroll


# mouse right on root unfocuses currently focused window
# 
# you can create functions as complex as you like and use them
# just like built-in functions...
AddToFunc _UnFocus ( Window 0; Focus Off; )
Mouse H3  R _UnFocus


# middle button on root opens window list
Mouse H2  R  WindowList


# For twin-classic menus, which appear only after you press right mouse
# button, use this:
#
# Right button always opens the menu:
#
Mouse H3  A  Interactive Menu
#
# Mouse left on menu-bar does screen resize:
#
Mouse H1  M  Interactive Screen


# You can also use turbovision style menus. They always stay visible and
# are selected with right button:
#
# _on_menu_bar_
#
# Right button on menu-bar opens the menu:
Mouse H3  M  Interactive Menu
# In this case, use mouse left button on menu-bar for screen resize:
Mouse H1  M  Interactive Screen

#________________________________________________________________________________
#__                                         _____________________________________|
#__ Window button/Mouse button intersection _____________________________________|
#________________________________________________________________________________|
#                                                                                |
#  ############################################################################  |
# | Note: both window controls and mouse buttons are called buttons, so it may | |
# | be a bit confusing. Look closely at the descriptions to understand whether | |
# | the word "Button" refers to a physical mouse button or a window control.   | |
#  ############################################################################  |
#________________________________________________________________________________|
#

# any mouse click on button 0 closes the window
#
Mouse  123  0  Close


# any mouse click on button 1 does RaiseLower
#
Mouse  123  1  RaiseLower


# any mouse click on button 2 does Roll/UnRoll
#
Mouse  123  2  Roll Toggle


# any mouse click on button 0 closes the window
#
Mouse  123  3  Close


# any mouse click on button 1 does RaiseLower
#
Mouse  123  4  RaiseLower


# any mouse click on button 2 does Roll/UnRoll
#
Mouse  123  5  Roll Toggle


# The following bindings only work if the maximize/fullscreen button is
# uncommented (created):
#
# mouse right click on button 3 does Maximize
#
#Mouse  3   3  Maximize
#
# mouse middle click on button 3 does FullScreen
#
#Mouse  2   3  FullScreen

#________________________________________________________________________________
#__                ______________________________________________________________|
#__ Window buttons ______________________________________________________________|
#________________________________________________________________________________|
#                                                                                |
#  ############################################################################  |
# | Note: both window controls and mouse buttons are called buttons, so it may | |
# | be a bit confusing. Look closely at the descriptions to understand whether | |
# | the word "Button" refers to a physical mouse button or a window control.   | |
#  ############################################################################  |
#________________________________________________________________________________|
#

# Window Button syntax:
#
# Button <number> "shape" {Left|Right} [[+|-]<position>]
#
# Where:
#
# Button = The command for a window button.
#
# <number> = The identifier to distinguish between buttons. Allowed numerical
# range is 0 to 9.
#
# "shape" = ASCII characters are allowed for creating a symbol on the button.
#
# {Left|Right} = The side of the window bar where the button will be based.
#
# [[+|-]<position>] = Options for specific positioning relative to the edge of
# the side set in {Left|Right}. Use only one:
#
# '<n>' specifies the distance between the button and the edge
# '+<n>' leaves <n> free spaces between this button and the preceding one
# '-<n>' says to place the button <n> characters nearer to the border than just
# `Left' or `Right', possibly intersecting other buttons.
#
# WARNING: Button 0 must ALWAYS be the close button, though close can be
# duplicated as another button number (see above).
#
# Also, this is weird but the button order/sequence as it appears on the window
# bar is dependent on the order/sequence in which they are copied below. In
# other words, if any of the lines below were to be taken out and then placed
# above or below where they previously had been, their respective buttons would
# appear in a different sequence on the window bar - even if the lines are typed
# exactly the same. Yeah I don't know why that was a good idea but there it is.
#
Button 1 "\x12\x12" Right
Button 2 "><" Right +1
Button 0 "[]" Right +1
Button 4 "\x12\x12" Left
Button 5 "><" Left +1
Button 3 "[]" Left +1


# This creates a maximize/fullscreen button.
#
# Button 3 "+-" Right +1

#________________________________________________________________________________
#__                                                                        ______|
#__ glossary of all available RC commands for ~/.twinrc (this config file) ______|
#________________________________________________________________________________|
#                                                                                |
#  ############################################################################  |
# | Note: every time you must write a string, you can use hexadecimal codes    | |
# | like "\xb1" or octal codes like "\261". Double quotes surrounding the      | |
# | string are only needed to protect special characters (i.e. parentheses,    | |
# | non-alphanumerical chars, etc.).                                           | |
# |                                                                            | |
# | Sequences like "\?" where ? is a character                                 | |
# | have the same meaning as in the C language:                                | |
# |                                                                            | |
# | "\"" is a string containing a double quote                                 | |
# | "\n" is a newline                                                          | |
# |                                                                            | |
# | And so on.                                                                 | |
# |                                                                            | |
# | `;' is the same as a newline.                                              | |
#  ############################################################################  |
#________________________________________________________________________________|
#

# AddScreen <screen name>
# # create a new virtual screen
# 
# AddToMenu <name> (
#   "entry" <function>
#   ...
# )
# # add entries to the common part of all menus
#
#
# AddToFunc <name> (
#   <function>
#   ...
# )
#
# Background <screen> <color> (
#   "string"
#   ... 
# )
# # set screen background
# 
# Beep
# 
# Border <wildcard-pattern> {Active|Inactive} (
#   "ÉÍ»"
#   "º º"
#   "ÈÍŒ"
# )
#
# Button <n> "<shape>" [+|-[<numeric pos>|Left|Right]]
# 
# Center
# # center window
# 
# Close
# # politely ask the client to close the window
# 
# DeleteFunc <name>
# 
# DeleteMenu <name>
# 
# DeleteButton <number>
# 
# DeleteScreen <screen>
# 
# Exec <shell command>
# 
# ExecTty <shell command>
# 
# Focus [On|Off|Toggle]
# 
# GlobalFlags [+|-][AltFont] [+|-][AlwaysCursor] [+|-][Blink] [+|-][EdgeScroll] [+|-][HideMenu] [+|-][MenuInfo] [+|-][MenuRelax] [+|-][Shadows <x> <y>]
# 
# Interactive <kind>
# # choose one of: Scroll, Move, Resize, Screen, Menu
# 
# Key <flags> <keyname> <context> <function>
# # <flags> is optional and can be one or more of
# # Shift Ctrl Alt
# 
# Kill
# # brutally kill the client's connection
# 
# Lower
# 
# Maximize
# 
# FullScreen
# 
# Menu
# # pop-up the menu of the currently focused window
# 
# Mouse <button> <where> <function>
# 
# Module <name> [On|Off]
# load/unload given module
#
# Move [+|-]<x> [+|-]<y>
# # move window
# 
# MoveScreen [+|-]<x> [+|-]<y>
# # move screen
# 
# Next
# # same as Window +1
# 
# Nop
# # do-nothing; used in a menu inserts a linebreak
# 
# Prev
# # same as Window -1
# 
# Quit
# # unconditionally quit twin!
# 
# Read <file>
# # open another file and parse it, then continue with current file
# # (like #include in C files)
# 
# Refresh
# # redraw all displays
# 
# Restart ""|<window manager name>
# # restart the WM or load another window manager
# 
# Resize [+|-]<x> [+|-]<y>
# # resize window
# 
# ResizeScreen [+|-]<x> [+|-]<y>
# 
# Raise
# 
# RaiseLower
# # raise-and-focus or lower-and-unfocus
# 
# Roll [On|Off|Toggle]
# 
# Scroll [+|-]<x> [+|-]<y>
# # scrolls window contents
# 
# SendToScreen <screen>
# # sends window to given screen
# 
# Sleep <n>
# # sleeps <n> milliseconds
#
# Stderr <string> ...
# # send message to stderr
# 
# SyntheticKey <flags> <key>
# # send the specified key event to window
#
# Wait <window name>
# # wait for specified window to be mapped
# 
# Window {[+|-]<n>|<window name>}
# # sets default window to operate on
# # Window <n> :
# # n = 0 : re-get current focused window
# # n > 0 : 1 = First Window, 2 = Second, etc.
# #
# # Window {+|-}<n> :
# # n = 0 : no-op
# # n < 0 : -1 : Prev Window, -2 Prev Prev, etc.
# # n > 0 : +1 : Next Window, +2 Next Next, etc.
# 
# WindowList
#
